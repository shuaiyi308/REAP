# Copyright (c) Facebook, Inc. and its affiliates.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Mostly copy-paste from timm library.
https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/vision_transformer.py
"""
import math
from functools import partial

import torch
import torch.nn as nn
import numpy as np


# from utils import trunc_normal_
##### gradient reversal layer #####
from torch.autograd import Function

class GradientReversal(Function):
    @staticmethod
    def forward(ctx, x, alpha):
        ctx.save_for_backward(x, alpha)
        return x

    @staticmethod
    def backward(ctx, grad_output):
        grad_input = None
        _, alpha = ctx.saved_tensors
        if ctx.needs_input_grad[0]:
            grad_input = - alpha*grad_output
        return grad_input, None
revgrad = GradientReversal.apply

class GradientReversal(nn.Module):
    def __init__(self, alpha=1.0):
        super().__init__()
        self.alpha = torch.tensor(alpha, requires_grad=False)

    def forward(self, x):
        return revgrad(x, self.alpha)
###################################
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False):
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


def patchify(imgs, p=16):
    """
    imgs: (N, 3, H, W)
    x: (N, L, patch_size**2 *3)
    imgs to x (3,224,224) to (3,196,768)
    """
    h, w = imgs.shape[-2:]
    assert imgs.shape[2] == imgs.shape[3] and imgs.shape[2] % p == 0
    h = h // p
    w = w // p
    x = imgs.reshape(shape=(imgs.shape[0], 3, h, p, w, p))
    x = torch.einsum('nchpwq->nhwpqc', x)
    x = x.reshape(shape=(imgs.shape[0], h * w, p ** 2 * 3))
    return x


class REAP(nn.Module):

    def __init__(self):
        super().__init__()
       
    def forward(self, x, imgs, image_perturbation, register_perturbation, prob=0.7, sim=0.3, epoch=0, min_mask_ratio=0.3, max_mask_ratio=0.7, use_embed=False, batchkeepsame=True):
        # patchify images sim距离值
        imgs = patchify(imgs)
        mask_ratio = prob
        if prob == 0.:
            return x, None, None
        cls_tokens, x = x[:, :1], x[:, 1:]
        N, L, D = x.shape  # (B,196,768)
        if use_embed:
            x_abs = x.norm(dim=-1)
            Sim_matrix = torch.einsum("aik,ajk->aij", x, x) / torch.einsum("ai,aj->aij", x_abs, x_abs)
            mean = imgs.mean(dim=-1, keepdim=True)
            var = imgs.var(dim=-1, keepdim=True)
            imgs = (imgs - mean) / (var + 1.e-6) ** .5
            imgs_abs = imgs.norm(dim=-1)
            Sim_matrix_imgs = torch.einsum("aik,ajk->aij", imgs, imgs) / torch.einsum("ai,aj->aij", imgs_abs, imgs_abs)
            ratio = epoch / 100
            Sim_matrix = Sim_matrix * ratio + Sim_matrix_imgs * (1 - ratio)
            Sim_f=Sim_matrix.flatten(1)
            sim_min,_ = torch.min(Sim_f, dim=1)
            sim_min= sim_min.unsqueeze(-1).unsqueeze(-1).repeat(1, L, L)
            sim_max,__=torch.max(Sim_f, dim=1)
            sim_max = sim_max.unsqueeze(-1).unsqueeze(-1).repeat(1, L, L)
            Sim_matrix = (Sim_matrix - sim_min) / (sim_max - sim_min)
        else:
            # Pixel Norm
            mean = imgs.mean(dim=-1, keepdim=True)
            var = imgs.var(dim=-1, keepdim=True)
            imgs = (imgs - mean) / (var + 1.e-6) ** .5
            imgs_abs = imgs.norm(dim=-1)
            # (B,L,L)(B,196,196)
            Sim_matrix = torch.einsum("aik,ajk->aij", imgs, imgs) / torch.einsum("ai,aj->aij", imgs_abs, imgs_abs)
    
        len_keep = int(L * (1 - mask_ratio))# 196*(1-prob)
        len_achor =int(L-len_keep)
        noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]  (B,196)
        # sort noise for each sample 
        ids_shuffle = torch.argsort(noise,dim=1)  # ascend: small is keep, large is remove 
        ids_throw = ids_shuffle[:, len_keep:]# (B,196*prob)
        # similarity map of anchors and others,beyond sim sets negative, others 0
        Sim_chose = torch.gather(Sim_matrix, dim=1, index=ids_throw.unsqueeze(-1).repeat(1, 1, L))  # (B,196*prob,196)
        #beyond sim sets 1* -1e12, sum(1): the sum of the similarity between 196 tokens and anchors
        Sim_chose_mask = (((Sim_chose) > sim).float() * -1e12).sum(1)#（b,196）
        Sim_chose_mask = torch.cat([torch.zeros(N, 1, device=x.device, dtype=x.dtype), Sim_chose_mask], dim=1)
        #mask(b,196) 
        mask = (Sim_chose_mask != 0)[:, 1:].type(x.dtype)
        #from batch
        min_p = L - int(mask.sum(-1).min().item())
        #from item
        token_keeplength=L-mask.sum(-1)
        # Perform cutoff masking with a minimum masking ratio
        noise_cutoff = torch.rand(N, L, device=x.device)  # noise in [0, 1]  (b,196)
        noise_cutoff = torch.exp(noise_cutoff)  # e^(0,1) 1~e
        noise_cutoff = noise_cutoff * mask  # Only consider visible patches with initial masking
        indices = torch.argsort(noise_cutoff, dim=-1)
        len_keep = min(int(L * (1 - min_mask_ratio)), min_p)
        keepdim_mask = torch.zeros(N, L, device=x.device)
        keepdim_posmask = torch.zeros(N, L, device=x.device)
        ids_keep = indices[:, :len_keep]
        if batchkeepsame:
            for i in range(len(ids_keep)):
                for j in range(len(ids_keep[0])):
                    keepdim_mask[i, ids_keep[i, j]] = 1
        else:
            token_keeplength = torch.where(token_keeplength > int(L * (1 - min_mask_ratio)), int(L * (1 - min_mask_ratio)), token_keeplength)
            token_keeplength = torch.where(token_keeplength < int(L * (1 - max_mask_ratio)),
                                           int(L * (1 - max_mask_ratio)), token_keeplength)

            for i in range(len(indices)):
                for j in range(int(token_keeplength[i])):

                    keepdim_mask[i, indices[i,j]] = 1
   

        keepdim_posmask = torch.where(keepdim_mask == 0, torch.tensor(1).cuda(), torch.tensor(0).cuda()).unsqueeze(-1).cuda()
        ids_throw = indices[:, len_keep:]
        mask[torch.arange(N).unsqueeze(1), ids_throw] = 1
        x = keepdim_mask.unsqueeze(-1)*x
        mask_ratio = mask.sum(-1) / L
        x = x + keepdim_posmask * image_perturbation
        x = torch.cat((x, register_perturbation),dim=1)
        x = torch.cat((cls_tokens, x), dim=1)
       
        return x

    
class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, return_attention=False, params=None):
        #  print('x',x.shape)
        y, attn = self.attn(self.norm1(x))
        #   print('attn',attn.shape)
        #   print('y',y.shape)
        if return_attention:
            return attn
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class PatchEmbed(nn.Module):
    """ Image to Patch Embedding
    """

    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=768):
        super().__init__()
        num_patches = (img_size // patch_size) * (img_size // patch_size)
        self.img_size = img_size
        self.patch_size = patch_size
        self.num_patches = num_patches

        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size)

    def forward(self, x):
        B, C, H, W = x.shape
        # print(self.proj(x).shape)
        # print(self.proj(x).flatten(2).shape)
        # print(self.proj(x).flatten(2).transpose(1, 2).shape)
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x


class VisionTransformer(nn.Module):
    """ Vision Transformer """

    def __init__(self, img_size=[224], patch_size=16, in_chans=3, num_classes=0, embed_dim=768, depth=12,
                 num_heads=12, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop_rate=0., attn_drop_rate=0.,
                 drop_path_rate=0., norm_layer=nn.LayerNorm, learanable_token_tau=0.1, **kwargs):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim

        self.patch_embed = PatchEmbed(
            img_size=img_size[0], patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim)
        num_patches = self.patch_embed.num_patches
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)
        # --add REAP--
        self.reap = REAP()
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        self.norm = norm_layer(embed_dim)
        # Classifier head
        self.head = nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        self.learanable_token_tau=learanable_token_tau
        self.learnable_std = nn.Parameter(torch.tensor(self.learanable_token_tau))
        trunc_normal_(self.pos_embed, std=.02)
        trunc_normal_(self.cls_token, std=.02)
        self.apply(self._init_weights)
        self.final_feat_dim = embed_dim
        self.gr=GradientReversal()



    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def interpolate_pos_encoding(self, x, w, h):  # positional embedding
        npatch = x.shape[1] - 1
        N = self.pos_embed.shape[1] - 1
        if npatch == N and w == h:
            return self.pos_embed
        class_pos_embed = self.pos_embed[:, 0]
        patch_pos_embed = self.pos_embed[:, 1:]
        dim = x.shape[-1]
        w0 = w // self.patch_embed.patch_size
        h0 = h // self.patch_embed.patch_size
        # we add a small number to avoid floating point error in the interpolation
        # see discussion at https://github.com/facebookresearch/dino/issues/8
        w0, h0 = w0 + 0.1, h0 + 0.1
        patch_pos_embed = nn.functional.interpolate(
            patch_pos_embed.reshape(1, int(math.sqrt(N)), int(math.sqrt(N)), dim).permute(0, 3, 1, 2),
            scale_factor=(w0 / math.sqrt(N), h0 / math.sqrt(N)),
            mode='bicubic',
        )
        assert int(w0) == patch_pos_embed.shape[-2] and int(h0) == patch_pos_embed.shape[-1]
        patch_pos_embed = patch_pos_embed.permute(0, 2, 3, 1).view(1, -1, dim)
        return torch.cat((class_pos_embed.unsqueeze(0), patch_pos_embed), dim=1)

    def prepare_tokens(self, x):
        B, nc, w, h = x.shape  # batch chanel w h
        x = self.patch_embed(x)  # patch linear embedding  #batch (img/patchsize)^2+1(position) chanel*patchsize*patchsize
        # add the [CLS] token to the embed patch tokens
        cls_tokens = self.cls_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, x), dim=1)
        x = x + self.interpolate_pos_encoding(x, w, h)  # positional embedding
        return self.pos_drop(x)



    def forward(self, x, params=None):
        B, C, H, W = x.shape
        imgs = x.detach()
        x = self.prepare_tokens(x) 
        B,P,F = x.shape
        image_perturbation = torch.randn(B, P - 1, F).cuda() * torch.abs(self.learnable_std).cuda()
        register_perturbation = torch.randn(B, params.num_noiseregister, F).cuda() * torch.abs(self.learnable_std).cuda()

        for i, blk in enumerate(self.blocks):
            if self.training and i == params.drop_layer: 
                x = self.reap(x, imgs, image_perturbation, register_perturbation, params.prob, params.sim, params.epoch)   
            x = blk(x, params=params)
        x = self.norm(x)
       


        return x[:, 0]  # cls token only

    def get_last_selfattention(self, x):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x = blk(x)
            else:
                # return attention of the last block
                return blk(x, return_attention=True)

    def get_intermediate_layers(self, x, n=1):
        x = self.prepare_tokens(x)
        # we return the output tokens from the `n` last blocks
        output = []
        for i, blk in enumerate(self.blocks):
            x = blk(x)
            if len(self.blocks) - i <= n:
                output.append(self.norm(x))
        return output


def vit_tiny(patch_size=16, **kwargs):
    model = VisionTransformer(
        patch_size=patch_size, embed_dim=192, depth=12, num_heads=3, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
    return model


def vit_small(patch_size=16, **kwargs):
    model = VisionTransformer(
        patch_size=patch_size, embed_dim=384, depth=12, num_heads=6, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), learanable_token_tau=0.1, **kwargs)
    return model


def vit_base(patch_size=16, **kwargs):
    model = VisionTransformer(
        patch_size=patch_size, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
    return model


class DINOHead(nn.Module):
    def __init__(self, in_dim, out_dim, use_bn=False, norm_last_layer=True, nlayers=3, hidden_dim=2048,
                 bottleneck_dim=256):
        super().__init__()
        nlayers = max(nlayers, 1)
        if nlayers == 1:
            self.mlp = nn.Linear(in_dim, bottleneck_dim)
        else:
            layers = [nn.Linear(in_dim, hidden_dim)]
            if use_bn:
                layers.append(nn.BatchNorm1d(hidden_dim))
            layers.append(nn.GELU())
            for _ in range(nlayers - 2):
                layers.append(nn.Linear(hidden_dim, hidden_dim))
                if use_bn:
                    layers.append(nn.BatchNorm1d(hidden_dim))
                layers.append(nn.GELU())
            layers.append(nn.Linear(hidden_dim, bottleneck_dim))
            self.mlp = nn.Sequential(*layers)
        self.apply(self._init_weights)
        self.last_layer = nn.utils.weight_norm(nn.Linear(bottleneck_dim, out_dim, bias=False))
        self.last_layer.weight_g.data.fill_(1)
        if norm_last_layer:
            self.last_layer.weight_g.requires_grad = False

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.mlp(x)
        x = nn.functional.normalize(x, dim=-1, p=2)
        x = self.last_layer(x)
        return x


if __name__ == '__main__':
    x = torch.randn(1, 3, 224, 224)
    model = VisionTransformer(depth=1)
    y = model(x)
    print(y.shape)